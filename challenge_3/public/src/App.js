// jshint esversion:6
import React from 'react';
import axios from 'axios';
export class App extends React.Component {
  constructor() {
    super();
    this.state = {
      page: 'home',
      userid: null,
      email: ''
    };
    this.setEmail = this.setEmail.bind(this);
    this.findId = this.findId.bind(this);
    this.setPage = this.setPage.bind(this);
  }

  findId(email) {
    axios.get(`http://localhost:3000/checkout/f1/${email}`).then(results => results.data).then(data => this.setState({
      userid: data.userid
    })).catch(err => console.log(err));
  }

  setEmail(email) {
    this.setState({
      email: email
    }, () => {
      this.findId(this.state.email);
    });
  }

  setPage(page) {
    this.setState({
      page: page
    });
  }

  componentDidMount() {}

  render() {
    let page;

    if (this.state.page === 'home') {
      page = React.createElement(HomePage, {
        setPage: this.setPage
      });
    } else if (this.state.page === 'form1') {
      page = React.createElement(Form1, {
        setEmail: this.setEmail,
        setPage: this.setPage
      });
    } else if (this.state.page === 'form2') {
      page = React.createElement(Form2, {
        userId: this.state.userid,
        setPage: this.setPage
      });
    } else if (this.state.page === 'form3') {
      page = React.createElement(Form3, {
        userId: this.state.userid,
        setPage: this.setPage
      });
    } else {
      page = React.createElement(PurchasePage, {
        userId: this.state.userid,
        setPage: this.setPage
      });
    }

    return React.createElement("div", null, React.createElement("h1", null, "MULTI-STEP CHECKOUT FORM"), page);
  }

}

const HomePage = props => {
  const goToForm1 = () => {
    props.setPage('form1');
  };

  return React.createElement("div", null, React.createElement("h1", null, "Go To Checkout Form"), React.createElement("button", {
    onClick: goToForm1
  }, "Checkout"));
};

class Form1 extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      _name: '',
      email: '',
      _password: ''
    };
    this.nameHandleChange = this.nameHandleChange.bind(this);
    this.emailHandleChange = this.emailHandleChange.bind(this);
    this.passwordHandleChange = this.passwordHandleChange.bind(this);
  }

  goToForm2() {
    axios.post(`http://localhost:3000/checkout/f1`, {
      _name: this.state._name,
      email: this.state.email,
      _password: this.state.password
    }).then(() => console.log('Form 1 data submitted.')).then(() => this.props.setPage('form2')).catch(err => {
      console.log(err);
      alert('Form 1 data was submitted incorrectly.');
    });
  }

  nameHandleChange(e) {
    this.setState({
      _name: e.target.value
    });
  }

  emailHandleChange(e) {
    this.setState({
      email: e.target.value
    }, () => {
      if (this.state.email.endsWith('.com')) {
        this.props.setEmail(this.state.email);
      }
    });
  }

  passwordHandleChange(e) {
    this.setState({
      _password: e.target.value
    });
  }

  render() {
    return React.createElement("div", null, React.createElement("form", null, React.createElement("label", null, "Name", React.createElement("input", {
      name: "_name",
      onChange: this.nameHandleChange,
      value: this.state._name
    })), React.createElement("label", null, "Email", React.createElement("input", {
      name: "email",
      onChange: this.emailHandleChange,
      value: this.state.email
    })), React.createElement("label", null, "Password", React.createElement("input", {
      name: "_password",
      onChange: this.emailHandleChange,
      value: this.state._password
    })), React.createElement("button", {
      onClick: this.goToForm2
    }, "Go to Shipping Form")));
  }

}

;

class Form2 extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      line1: '',
      line2: '',
      _state: '',
      zipcode: '',
      userid: this.props.userId
    };
    this.line1HandleChange = this.line1HandleChange.bind(this);
    this.line2HandleChange = this.line2HandleChange.bind(this);
    this.stateHandleChange = this.stateHandleChange.bind(this);
    this.zipcodeHandleChange = this.zipcodeHandleChange.bind(this);
  }

  goToForm3() {
    axios.post(`http://localhost:3000/checkout/f2`, {
      line1: this.state.line1,
      line2: this.state.line2,
      _state: this.state._state,
      zipcode: this.state.zipcode,
      userid: this.state.userid
    }).then(() => console.log('Form 2 data submitted.')).then(() => this.props.setPage('form3')).catch(err => {
      console.log(err);
      alert('Form 2 data was submitted incorrectly.');
    });
  }

  line1HandleChange(e) {
    this.setState({
      line1: e.target.value
    });
  }

  line2HandleChange(e) {
    this.setState({
      line2: e.target.value
    });
  }

  stateHandleChange(e) {
    this.setState({
      _state: e.target.value
    });
  }

  zipcodeHandleChange(e) {
    this.setState({
      zipcode: e.target.value
    });
  }

  render() {
    return React.createElement("div", null, React.createElement("form", null, React.createElement("label", null, "Line 1", React.createElement("input", {
      name: "line1",
      onChange: this.line1HandleChange,
      value: this.state.line1
    })), React.createElement("label", null, "Line 2", React.createElement("input", {
      name: "line2",
      onChange: this.line2HandleChange,
      value: this.state.line2
    })), React.createElement("label", null, "State", React.createElement("input", {
      name: "_state",
      onChange: this.stateHandleChange,
      value: this.state._state
    })), React.createElement("label", null, "State", React.createElement("input", {
      name: "zipcode",
      onChange: this.zipcodeHandleChange,
      value: this.state.zipcode
    })), React.createElement("button", {
      onClick: this.goToForm3
    }, "Go to Billing Form")));
  }

}

;

class Form3 extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      creditcard: '',
      expirydate: '',
      cvv: '',
      zipcode2: '',
      userid: this.props.userId
    };
    this.creditCardHandleChange = this.creditCardHandleChange.bind(this);
    this.expiryDateHandleChange = this.expiryDateHandleChange.bind(this);
    this.cVVHandleChange = this.cVVHandleChange.bind(this);
    this.zipcode2HandleChange = this.zipcode2HandleChange.bind(this);
  }

  creditCardHandleChange(e) {
    this.setState({
      creditcard: e.target.value
    });
  }

  expiryDateHandleChange(e) {
    this.setState({
      expirydate: e.target.value
    });
  }

  cVVHandleChange(e) {
    this.setState({
      cvv: e.target.value
    });
  }

  zipcode2HandleChange(e) {
    this.setState({
      zipcode2: e.target.value
    });
  }

  goToPurchase() {
    axios.post(`http://localhost:3000/checkout/f3`, {
      creditcard: this.state.creditcard,
      expirydate: this.state.expirydate,
      cvv: this.state.cvv,
      zipcode: this.state.zipcode2,
      userid: this.state.userid
    }).then(() => console.log('Form 3 data submitted.')).then(() => this.props.setPage('purchase')).catch(err => {
      console.log(err);
      alert('Form 3 data was submitted incorrectly.');
    });
  }

  render() {
    return React.createElement("div", null, React.createElement("form", null, React.createElement("label", null, "Credit Card #", React.createElement("input", {
      name: "line1",
      onChange: this.creditCardHandleChange,
      value: this.state.creditcard
    })), React.createElement("label", null, "Expiration Date", React.createElement("input", {
      name: "line2",
      onChange: this.expiryDateHandleChange,
      value: this.state.expirydate
    })), React.createElement("label", null, "CVV", React.createElement("input", {
      name: "_state",
      onChange: this.cVVHandleChange,
      value: this.state.cvv
    })), React.createElement("label", null, "Zip Code", React.createElement("input", {
      name: "zipcode",
      onChange: this.zipcode2HandleChange,
      value: this.state.zipcode2
    })), React.createElement("button", {
      onClick: this.goToPurchase
    }, "Go to Purchase")));
  }

}

;

class PurchasePage extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      data: null
    };
  }

  goToHome() {
    this.props.setPage('home');
  }

  componentDidMount() {
    axios.get(`http://localhost:3000/checkout/all/${this.props.userId}`).then(results => results.data).then(data => this.setState({
      data
    })).catch(err => console.log(err));
  }

  render() {
    return React.createElement("div", null, React.createElement("div", null, this.state.data ? Object.keys(this.state.data).map(key => {
      return React.createElement("span", null, `${this.state.data[key]}\n`);
    }) : null), React.createElement("button", {
      onClick: this.goToHome
    }, "Go to Home"));
  }

}

;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2NsaWVudC9zcmMvQXBwLmpzeCJdLCJuYW1lcyI6WyJSZWFjdCIsImF4aW9zIiwiQXBwIiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJzdGF0ZSIsInBhZ2UiLCJ1c2VyaWQiLCJlbWFpbCIsInNldEVtYWlsIiwiYmluZCIsImZpbmRJZCIsInNldFBhZ2UiLCJnZXQiLCJ0aGVuIiwicmVzdWx0cyIsImRhdGEiLCJzZXRTdGF0ZSIsImNhdGNoIiwiZXJyIiwiY29uc29sZSIsImxvZyIsImNvbXBvbmVudERpZE1vdW50IiwicmVuZGVyIiwiSG9tZVBhZ2UiLCJwcm9wcyIsImdvVG9Gb3JtMSIsIkZvcm0xIiwiX25hbWUiLCJfcGFzc3dvcmQiLCJuYW1lSGFuZGxlQ2hhbmdlIiwiZW1haWxIYW5kbGVDaGFuZ2UiLCJwYXNzd29yZEhhbmRsZUNoYW5nZSIsImdvVG9Gb3JtMiIsInBvc3QiLCJwYXNzd29yZCIsImFsZXJ0IiwiZSIsInRhcmdldCIsInZhbHVlIiwiZW5kc1dpdGgiLCJGb3JtMiIsImxpbmUxIiwibGluZTIiLCJfc3RhdGUiLCJ6aXBjb2RlIiwidXNlcklkIiwibGluZTFIYW5kbGVDaGFuZ2UiLCJsaW5lMkhhbmRsZUNoYW5nZSIsInN0YXRlSGFuZGxlQ2hhbmdlIiwiemlwY29kZUhhbmRsZUNoYW5nZSIsImdvVG9Gb3JtMyIsIkZvcm0zIiwiY3JlZGl0Y2FyZCIsImV4cGlyeWRhdGUiLCJjdnYiLCJ6aXBjb2RlMiIsImNyZWRpdENhcmRIYW5kbGVDaGFuZ2UiLCJleHBpcnlEYXRlSGFuZGxlQ2hhbmdlIiwiY1ZWSGFuZGxlQ2hhbmdlIiwiemlwY29kZTJIYW5kbGVDaGFuZ2UiLCJnb1RvUHVyY2hhc2UiLCJQdXJjaGFzZVBhZ2UiLCJnb1RvSG9tZSIsIk9iamVjdCIsImtleXMiLCJtYXAiLCJrZXkiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsT0FBT0EsS0FBUCxNQUFrQixPQUFsQjtBQUNBLE9BQU9DLEtBQVAsTUFBa0IsT0FBbEI7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Qm1ELEdBQWhCLENBQXFCLElBQS9CLENBREo7QUFHSCxLQUpELENBRkosR0FVSSxJQVpSLENBREosRUFpQkk7QUFBUSxNQUFBLE9BQU8sRUFBRSxLQUFLSjtBQUF0QixvQkFqQkosQ0FESjtBQXFCSDs7QUF4Q3NDOztBQTBDMUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBqc2hpbnQgZXN2ZXJzaW9uOjZcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuXG5leHBvcnQgY2xhc3MgQXBwIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgcGFnZTogJ2hvbWUnLFxuICAgICAgICAgICB1c2VyaWQ6IG51bGwsIFxuICAgICAgICAgICBlbWFpbDogJydcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zZXRFbWFpbCA9IHRoaXMuc2V0RW1haWwuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5maW5kSWQgPSB0aGlzLmZpbmRJZC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnNldFBhZ2UgPSB0aGlzLnNldFBhZ2UuYmluZCh0aGlzKTtcbiAgICB9XG4gICBcbiAgICBmaW5kSWQoZW1haWwpIHtcbiAgICAgICBheGlvcy5nZXQoYGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9jaGVja291dC9mMS8ke2VtYWlsfWApXG4gICAgICAgLnRoZW4ocmVzdWx0cyA9PiByZXN1bHRzLmRhdGEpXG4gICAgICAgLnRoZW4oZGF0YSA9PiB0aGlzLnNldFN0YXRlKHt1c2VyaWQ6IGRhdGEudXNlcmlkfSkpXG4gICAgICAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmxvZyhlcnIpKTtcbiAgIH1cbiAgIFxuICAgIHNldEVtYWlsKGVtYWlsKSB7XG4gICAgICAgdGhpcy5zZXRTdGF0ZSh7ZW1haWw6IGVtYWlsfSwgKCkgPT4ge1xuICAgICAgICAgICB0aGlzLmZpbmRJZCh0aGlzLnN0YXRlLmVtYWlsKTtcbiAgICAgICB9KTtcbiAgICB9XG4gICBcbiAgIHNldFBhZ2UocGFnZSkge1xuICAgICAgIHRoaXMuc2V0U3RhdGUoe3BhZ2U6IHBhZ2V9KTtcbiAgIH1cbiAgIFxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgXG4gICAgfVxuICAgXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBsZXQgcGFnZTtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUucGFnZSA9PT0gJ2hvbWUnKSB7XG4gICAgICAgICAgICBwYWdlID0gPEhvbWVQYWdlIHNldFBhZ2U9e3RoaXMuc2V0UGFnZX0vPjtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlLnBhZ2UgPT09ICdmb3JtMScpIHtcbiAgICAgICAgICAgIHBhZ2UgPSA8Rm9ybTEgc2V0RW1haWw9e3RoaXMuc2V0RW1haWx9IHNldFBhZ2U9e3RoaXMuc2V0UGFnZX0vPjtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlLnBhZ2UgPT09ICdmb3JtMicpIHtcbiAgICAgICAgICAgIHBhZ2UgPSA8Rm9ybTIgdXNlcklkPXt0aGlzLnN0YXRlLnVzZXJpZH0gc2V0UGFnZT17dGhpcy5zZXRQYWdlfS8+O1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUucGFnZSA9PT0gJ2Zvcm0zJykge1xuICAgICAgICAgICAgcGFnZSA9IDxGb3JtMyB1c2VySWQ9e3RoaXMuc3RhdGUudXNlcmlkfSBzZXRQYWdlPXt0aGlzLnNldFBhZ2V9Lz47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYWdlID0gPFB1cmNoYXNlUGFnZSB1c2VySWQ9e3RoaXMuc3RhdGUudXNlcmlkfSBzZXRQYWdlPXt0aGlzLnNldFBhZ2V9Lz47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgIDxoMT5NVUxUSS1TVEVQIENIRUNLT1VUIEZPUk08L2gxPlxuICAgICAgICAgICB7XG4gICAgICAgICAgICAgICBwYWdlXG4gICAgICAgICAgIH1cbiAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxuICAgfVxuICAgXG4gICBjb25zdCBIb21lUGFnZSA9IChwcm9wcykgPT4ge1xuICAgICAgIGNvbnN0IGdvVG9Gb3JtMSA9ICgpID0+IHtcbiAgICAgICAgICAgcHJvcHMuc2V0UGFnZSgnZm9ybTEnKTtcbiAgICAgICB9IFxuICAgICAgIHJldHVybiAoXG4gICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICA8aDE+R28gVG8gQ2hlY2tvdXQgRm9ybTwvaDE+XG4gICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2dvVG9Gb3JtMX0+Q2hlY2tvdXQ8L2J1dHRvbj5cbiAgICAgICAgICAgPC9kaXY+XG4gICAgICAgKTtcbiAgIH1cbiAgIFxuICAgY2xhc3MgRm9ybTEgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgICAgIF9uYW1lOiAnJyxcbiAgICAgICAgICAgICAgIGVtYWlsOiAnJyxcbiAgICAgICAgICAgICAgIF9wYXNzd29yZDogJydcbiAgICAgICAgICAgfTtcbiAgICAgICAgICAgdGhpcy5uYW1lSGFuZGxlQ2hhbmdlID0gdGhpcy5uYW1lSGFuZGxlQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgICAgICAgIHRoaXMuZW1haWxIYW5kbGVDaGFuZ2UgPSB0aGlzLmVtYWlsSGFuZGxlQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgICAgICAgIHRoaXMucGFzc3dvcmRIYW5kbGVDaGFuZ2UgPSB0aGlzLnBhc3N3b3JkSGFuZGxlQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgICAgfVxuICAgXG4gICAgICAgZ29Ub0Zvcm0yKCkge1xuICAgICAgICAgICBheGlvcy5wb3N0KGBodHRwOi8vbG9jYWxob3N0OjMwMDAvY2hlY2tvdXQvZjFgLCB7XG4gICAgICAgICAgICAgICBfbmFtZTogdGhpcy5zdGF0ZS5fbmFtZSxcbiAgICAgICAgICAgICAgIGVtYWlsOiB0aGlzLnN0YXRlLmVtYWlsLFxuICAgICAgICAgICAgICAgX3Bhc3N3b3JkOiB0aGlzLnN0YXRlLnBhc3N3b3JkXG4gICAgICAgICAgIH0pXG4gICAgICAgICAgIC50aGVuKCgpID0+IGNvbnNvbGUubG9nKCdGb3JtIDEgZGF0YSBzdWJtaXR0ZWQuJykpXG4gICAgICAgICAgIC50aGVuKCgpID0+IHRoaXMucHJvcHMuc2V0UGFnZSgnZm9ybTInKSlcbiAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgICAgICAgYWxlcnQoJ0Zvcm0gMSBkYXRhIHdhcyBzdWJtaXR0ZWQgaW5jb3JyZWN0bHkuJyk7XG4gICAgICAgICAgIH0pXG4gICAgICAgfVxuICAgICAgIFxuICAgICAgIG5hbWVIYW5kbGVDaGFuZ2UoZSkge1xuICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtfbmFtZTogZS50YXJnZXQudmFsdWV9KTtcbiAgICAgICB9XG4gICBcbiAgICAgICBlbWFpbEhhbmRsZUNoYW5nZShlKSB7XG4gICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe2VtYWlsOiBlLnRhcmdldC52YWx1ZX0sICgpID0+IHtcbiAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlLmVtYWlsLmVuZHNXaXRoKCcuY29tJykpIHtcbiAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnNldEVtYWlsKHRoaXMuc3RhdGUuZW1haWwpO1xuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICB9KTtcbiAgICAgICB9XG4gICBcbiAgICAgICBwYXNzd29yZEhhbmRsZUNoYW5nZShlKSB7XG4gICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe19wYXNzd29yZDogZS50YXJnZXQudmFsdWV9KTtcbiAgICAgICB9XG4gICBcbiAgICAgICByZW5kZXIoKSB7XG4gICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgIDxmb3JtPlxuICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+TmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IG5hbWU9J19uYW1lJyBvbkNoYW5nZT17dGhpcy5uYW1lSGFuZGxlQ2hhbmdlfSB2YWx1ZT17dGhpcy5zdGF0ZS5fbmFtZX0vPlxuICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+RW1haWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBuYW1lPSdlbWFpbCcgb25DaGFuZ2U9e3RoaXMuZW1haWxIYW5kbGVDaGFuZ2V9IHZhbHVlPXt0aGlzLnN0YXRlLmVtYWlsfS8+XG4gICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD5QYXNzd29yZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IG5hbWU9J19wYXNzd29yZCcgb25DaGFuZ2U9e3RoaXMuZW1haWxIYW5kbGVDaGFuZ2V9IHZhbHVlPXt0aGlzLnN0YXRlLl9wYXNzd29yZH0vPlxuICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3RoaXMuZ29Ub0Zvcm0yfT5HbyB0byBTaGlwcGluZyBGb3JtPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICk7XG4gICAgICAgfVxuICAgfTtcbiAgIFxuICAgY2xhc3MgRm9ybTIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgICAgIGxpbmUxOiAnJyxcbiAgICAgICAgICAgICAgIGxpbmUyOiAnJyxcbiAgICAgICAgICAgICAgIF9zdGF0ZTogJycsXG4gICAgICAgICAgICAgICB6aXBjb2RlOiAnJyxcbiAgICAgICAgICAgICAgIHVzZXJpZDogdGhpcy5wcm9wcy51c2VySWRcbiAgICAgICAgICAgfTtcbiAgICAgICAgICAgdGhpcy5saW5lMUhhbmRsZUNoYW5nZSA9IHRoaXMubGluZTFIYW5kbGVDaGFuZ2UuYmluZCh0aGlzKTtcbiAgICAgICAgICAgdGhpcy5saW5lMkhhbmRsZUNoYW5nZSA9IHRoaXMubGluZTJIYW5kbGVDaGFuZ2UuYmluZCh0aGlzKTtcbiAgICAgICAgICAgdGhpcy5zdGF0ZUhhbmRsZUNoYW5nZSA9IHRoaXMuc3RhdGVIYW5kbGVDaGFuZ2UuYmluZCh0aGlzKTtcbiAgICAgICAgICAgdGhpcy56aXBjb2RlSGFuZGxlQ2hhbmdlID0gdGhpcy56aXBjb2RlSGFuZGxlQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgICAgfVxuICAgXG4gICAgICAgZ29Ub0Zvcm0zKCkge1xuICAgICAgICAgICBheGlvcy5wb3N0KGBodHRwOi8vbG9jYWxob3N0OjMwMDAvY2hlY2tvdXQvZjJgLCB7XG4gICAgICAgICAgICAgICBsaW5lMTogdGhpcy5zdGF0ZS5saW5lMSxcbiAgICAgICAgICAgICAgIGxpbmUyOiB0aGlzLnN0YXRlLmxpbmUyLFxuICAgICAgICAgICAgICAgX3N0YXRlOiB0aGlzLnN0YXRlLl9zdGF0ZSxcbiAgICAgICAgICAgICAgIHppcGNvZGU6IHRoaXMuc3RhdGUuemlwY29kZSxcbiAgICAgICAgICAgICAgIHVzZXJpZDogdGhpcy5zdGF0ZS51c2VyaWRcbiAgICAgICAgICAgfSlcbiAgICAgICAgICAgLnRoZW4oKCkgPT4gY29uc29sZS5sb2coJ0Zvcm0gMiBkYXRhIHN1Ym1pdHRlZC4nKSlcbiAgICAgICAgICAgLnRoZW4oKCkgPT4gdGhpcy5wcm9wcy5zZXRQYWdlKCdmb3JtMycpKVxuICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICAgICBhbGVydCgnRm9ybSAyIGRhdGEgd2FzIHN1Ym1pdHRlZCBpbmNvcnJlY3RseS4nKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgfSBcbiAgIFxuICAgICAgIGxpbmUxSGFuZGxlQ2hhbmdlKGUpIHtcbiAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7bGluZTE6IGUudGFyZ2V0LnZhbHVlfSk7XG4gICAgICAgfVxuICAgXG4gICAgICAgbGluZTJIYW5kbGVDaGFuZ2UoZSkge1xuICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtsaW5lMjogZS50YXJnZXQudmFsdWV9KTtcbiAgICAgICB9XG4gICBcbiAgICAgICBzdGF0ZUhhbmRsZUNoYW5nZShlKSB7XG4gICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe19zdGF0ZTogZS50YXJnZXQudmFsdWV9KTtcbiAgICAgICB9XG4gICBcbiAgICAgICB6aXBjb2RlSGFuZGxlQ2hhbmdlKGUpIHtcbiAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7emlwY29kZTogZS50YXJnZXQudmFsdWV9KTtcbiAgICAgICB9XG4gICBcbiAgICAgICByZW5kZXIoKSB7XG4gICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgIDxmb3JtPlxuICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+TGluZSAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgbmFtZT0nbGluZTEnIG9uQ2hhbmdlPXt0aGlzLmxpbmUxSGFuZGxlQ2hhbmdlfSB2YWx1ZT17dGhpcy5zdGF0ZS5saW5lMX0vPlxuICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+TGluZSAyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgbmFtZT0nbGluZTInIG9uQ2hhbmdlPXt0aGlzLmxpbmUySGFuZGxlQ2hhbmdlfSB2YWx1ZT17dGhpcy5zdGF0ZS5saW5lMn0vPlxuICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+U3RhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBuYW1lPSdfc3RhdGUnIG9uQ2hhbmdlPXt0aGlzLnN0YXRlSGFuZGxlQ2hhbmdlfSB2YWx1ZT17dGhpcy5zdGF0ZS5fc3RhdGV9Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPlN0YXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgbmFtZT0nemlwY29kZScgb25DaGFuZ2U9e3RoaXMuemlwY29kZUhhbmRsZUNoYW5nZX0gdmFsdWU9e3RoaXMuc3RhdGUuemlwY29kZX0vPlxuICAgICAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3RoaXMuZ29Ub0Zvcm0zfT5HbyB0byBCaWxsaW5nIEZvcm08L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgKTtcbiAgICAgICB9XG4gICBcbiAgIH07XG4gICBcbiAgIGNsYXNzIEZvcm0zIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgICAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICAgICBjcmVkaXRjYXJkOiAnJyxcbiAgICAgICAgICAgICAgIGV4cGlyeWRhdGU6ICcnLFxuICAgICAgICAgICAgICAgY3Z2OiAnJyxcbiAgICAgICAgICAgICAgIHppcGNvZGUyOiAnJyxcbiAgICAgICAgICAgICAgIHVzZXJpZDogdGhpcy5wcm9wcy51c2VySWRcbiAgICAgICAgICAgfTtcbiAgICAgICAgICAgdGhpcy5jcmVkaXRDYXJkSGFuZGxlQ2hhbmdlID0gdGhpcy5jcmVkaXRDYXJkSGFuZGxlQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgICAgICAgIHRoaXMuZXhwaXJ5RGF0ZUhhbmRsZUNoYW5nZSA9IHRoaXMuZXhwaXJ5RGF0ZUhhbmRsZUNoYW5nZS5iaW5kKHRoaXMpO1xuICAgICAgICAgICB0aGlzLmNWVkhhbmRsZUNoYW5nZSA9IHRoaXMuY1ZWSGFuZGxlQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgICAgICAgIHRoaXMuemlwY29kZTJIYW5kbGVDaGFuZ2UgPSB0aGlzLnppcGNvZGUySGFuZGxlQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgICAgfVxuICAgXG4gICAgICAgY3JlZGl0Q2FyZEhhbmRsZUNoYW5nZShlKSB7XG4gICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe2NyZWRpdGNhcmQ6IGUudGFyZ2V0LnZhbHVlfSk7XG4gICAgICAgfVxuICAgXG4gICAgICAgZXhwaXJ5RGF0ZUhhbmRsZUNoYW5nZShlKSB7XG4gICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe2V4cGlyeWRhdGU6IGUudGFyZ2V0LnZhbHVlfSk7XG4gICAgICAgfVxuICAgXG4gICAgICAgY1ZWSGFuZGxlQ2hhbmdlKGUpIHtcbiAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7Y3Z2OiBlLnRhcmdldC52YWx1ZX0pO1xuICAgICAgIH1cbiAgIFxuICAgICAgIHppcGNvZGUySGFuZGxlQ2hhbmdlKGUpIHtcbiAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7emlwY29kZTI6IGUudGFyZ2V0LnZhbHVlfSk7XG4gICAgICAgfVxuICAgXG4gICAgICAgZ29Ub1B1cmNoYXNlKCkge1xuICAgICAgICAgICBheGlvcy5wb3N0KGBodHRwOi8vbG9jYWxob3N0OjMwMDAvY2hlY2tvdXQvZjNgLCB7XG4gICAgICAgICAgICAgICBjcmVkaXRjYXJkOiB0aGlzLnN0YXRlLmNyZWRpdGNhcmQsXG4gICAgICAgICAgICAgICBleHBpcnlkYXRlOiB0aGlzLnN0YXRlLmV4cGlyeWRhdGUsXG4gICAgICAgICAgICAgICBjdnY6IHRoaXMuc3RhdGUuY3Z2LFxuICAgICAgICAgICAgICAgemlwY29kZTogdGhpcy5zdGF0ZS56aXBjb2RlMixcbiAgICAgICAgICAgICAgIHVzZXJpZDogdGhpcy5zdGF0ZS51c2VyaWRcbiAgICAgICAgICAgfSlcbiAgICAgICAgICAgLnRoZW4oKCkgPT4gY29uc29sZS5sb2coJ0Zvcm0gMyBkYXRhIHN1Ym1pdHRlZC4nKSlcbiAgICAgICAgICAgLnRoZW4oKCkgPT4gdGhpcy5wcm9wcy5zZXRQYWdlKCdwdXJjaGFzZScpKVxuICAgICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICAgICBhbGVydCgnRm9ybSAzIGRhdGEgd2FzIHN1Ym1pdHRlZCBpbmNvcnJlY3RseS4nKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgfVxuICAgXG4gICAgICAgcmVuZGVyKCkge1xuICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgIDxmb3JtPlxuICAgICAgICAgICAgICAgICAgIDxsYWJlbD5DcmVkaXQgQ2FyZCAjXG4gICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBuYW1lPSdsaW5lMScgb25DaGFuZ2U9e3RoaXMuY3JlZGl0Q2FyZEhhbmRsZUNoYW5nZX0gdmFsdWU9e3RoaXMuc3RhdGUuY3JlZGl0Y2FyZH0vPlxuICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgPGxhYmVsPkV4cGlyYXRpb24gRGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgbmFtZT0nbGluZTInIG9uQ2hhbmdlPXt0aGlzLmV4cGlyeURhdGVIYW5kbGVDaGFuZ2V9IHZhbHVlPXt0aGlzLnN0YXRlLmV4cGlyeWRhdGV9Lz5cbiAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgIDxsYWJlbD5DVlZcbiAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IG5hbWU9J19zdGF0ZScgb25DaGFuZ2U9e3RoaXMuY1ZWSGFuZGxlQ2hhbmdlfSB2YWx1ZT17dGhpcy5zdGF0ZS5jdnZ9Lz5cbiAgICAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgIDxsYWJlbD5aaXAgQ29kZVxuICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgbmFtZT0nemlwY29kZScgb25DaGFuZ2U9e3RoaXMuemlwY29kZTJIYW5kbGVDaGFuZ2V9IHZhbHVlPXt0aGlzLnN0YXRlLnppcGNvZGUyfS8+XG4gICAgICAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e3RoaXMuZ29Ub1B1cmNoYXNlfT5HbyB0byBQdXJjaGFzZTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgKTtcbiAgICAgICB9XG4gICB9O1xuICAgXG4gICBjbGFzcyBQdXJjaGFzZVBhZ2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgICAgIGRhdGE6IG51bGxcbiAgICAgICAgICAgfTtcbiAgICAgICB9XG4gICAgICAgZ29Ub0hvbWUoKSB7XG4gICAgICAgICAgIHRoaXMucHJvcHMuc2V0UGFnZSgnaG9tZScpO1xuICAgICAgIH1cbiAgIFxuICAgICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICAgICBheGlvcy5nZXQoYGh0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9jaGVja291dC9hbGwvJHt0aGlzLnByb3BzLnVzZXJJZH1gKVxuICAgICAgICAgICAudGhlbihyZXN1bHRzID0+IHJlc3VsdHMuZGF0YSlcbiAgICAgICAgICAgLnRoZW4oZGF0YSA9PiB0aGlzLnNldFN0YXRlKHtkYXRhfSkpXG4gICAgICAgICAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5sb2coZXJyKSk7XG4gICAgICAgfVxuICAgXG4gICAgICAgcmVuZGVyKCkge1xuICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5kYXRhID8gXG4gICAgICAgICAgICAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMuc3RhdGUuZGF0YSkubWFwKGtleSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e2Ake3RoaXMuc3RhdGUuZGF0YVtrZXldfVxcbmB9PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICApIFxuICAgICAgICAgICAgICAgICAgICAgICA6IFxuICAgICAgICAgICAgICAgICAgICAgICAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLmdvVG9Ib21lfT5HbyB0byBIb21lPC9idXR0b24+XG4gICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgKTtcbiAgICAgICB9XG4gICBcbiAgIH07XG4gICAiXX0=